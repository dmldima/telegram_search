import os
import re
from datetime import datetime, timedelta
from telethon import TelegramClient
from telethon.sessions import StringSession
import asyncio
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = int(os.getenv('TELEGRAM_API_ID'))
API_HASH = os.getenv('TELEGRAM_API_HASH')
SESSION_STRING = os.getenv('SESSION_STRING')
BOT_TOKEN = os.getenv('BOT_TOKEN')
YOUR_USER_ID = int(os.getenv('YOUR_USER_ID'))

# –ö–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
CHANNELS = os.getenv('CHANNELS', '').split(',')
CHANNELS = [ch.strip() for ch in CHANNELS if ch.strip()]

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –û–°–ù–û–í–´ —Å–ª–æ–≤: "–∏–Ω–≤–µ—Å—Ç" –≤–º–µ—Å—Ç–æ "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏,–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è,–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
KEYWORDS = os.getenv('KEYWORDS', '').split(',')
KEYWORDS = [kw.strip().lower() for kw in KEYWORDS if kw.strip()]

# –°–ª–æ–≤–∞-–∏—Å–∫–ª—é—á–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
EXCLUDE_KEYWORDS = os.getenv('EXCLUDE_KEYWORDS', '').split(',')
EXCLUDE_KEYWORDS = [kw.strip().lower() for kw in EXCLUDE_KEYWORDS if kw.strip()]

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (—á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π)
PATTERNS_STR = os.getenv('PATTERNS', '')
PATTERNS = [p.strip() for p in PATTERNS_STR.split(';') if p.strip()]

# –ì–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
SEARCH_DEPTH = int(os.getenv('SEARCH_DEPTH', '100'))

# –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —á–∞—Å–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞)
TIME_RANGE_HOURS = int(os.getenv('TIME_RANGE_HOURS', '24'))

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
PROCESSED_FILE = 'processed_messages.json'


def load_processed_messages():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if os.path.exists(PROCESSED_FILE):
        with open(PROCESSED_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å —Å timestamp –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            if isinstance(data, list):
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
                return {msg_id: datetime.now().isoformat() for msg_id in data}
            return data
    return {}


def save_processed_messages(processed_dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—á–∏—Å—Ç–∫–æ–π —Å—Ç–∞—Ä—ã—Ö"""
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
    cutoff_date = datetime.now() - timedelta(days=30)
    cleaned = {
        msg_id: timestamp 
        for msg_id, timestamp in processed_dict.items()
        if datetime.fromisoformat(timestamp) > cutoff_date
    }
    
    with open(PROCESSED_FILE, 'w', encoding='utf-8') as f:
        json.dump(cleaned, f, ensure_ascii=False, indent=2)
    
    return len(processed_dict) - len(cleaned)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö


def should_forward_message(message_text):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –æ—Å–Ω–æ–≤–∞–º —Å–ª–æ–≤ (–æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è)
    """
    if not message_text:
        return False
    
    text_lower = message_text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö —Å–ª–æ–≤ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏–π)
    for exclude_word in EXCLUDE_KEYWORDS:
        if exclude_word:
            # –ò—â–µ–º —Å–ª–æ–≤–æ –∫–∞–∫ —á–∞—Å—Ç—å –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤ (–æ–∫–æ–Ω—á–∞–Ω–∏—è)
            if exclude_word in text_lower:
                return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏–π)
    for keyword in KEYWORDS:
        if keyword:
            # –ò—â–µ–º –æ—Å–Ω–æ–≤—É —Å–ª–æ–≤–∞ - –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∞—Å—Ç—å—é —Å–ª–æ–≤–∞ —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º
            # –ù–∞–ø—Ä–∏–º–µ—Ä "–∏–Ω–≤–µ—Å—Ç" –Ω–∞–π–¥–µ—Ç: –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è, –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏–Ω–≤–µ—Å—Ç–æ—Ä
            if keyword in text_lower:
                return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    for pattern in PATTERNS:
        if pattern:
            try:
                if re.search(pattern, message_text, re.IGNORECASE):
                    return True
            except re.error:
                print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {pattern}")
    
    return False


async def monitor_channel(client, bot, channel_username, processed_dict):
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """
    new_processed = 0
    forwarded = 0
    skipped_duplicates = 0
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
        channel = await client.get_entity(channel_username)
        
        print(f"üì° –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–Ω–∞–ª: {channel_username}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        time_threshold = datetime.now() - timedelta(hours=TIME_RANGE_HOURS)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≥–ª—É–±–∏–Ω—ã –ø–æ–∏—Å–∫–∞
        async for message in client.iter_messages(channel, limit=SEARCH_DEPTH):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if message.date.replace(tzinfo=None) < time_threshold:
                break
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–∞–Ω–∞–ª + ID —Å–æ–æ–±—â–µ–Ω–∏—è)
            unique_id = f"{channel_username}:{message.id}"
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏)
            if unique_id in processed_dict:
                skipped_duplicates += 1
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = message.text or ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å timestamp
            processed_dict[unique_id] = datetime.now().isoformat()
            new_processed += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å
            if should_forward_message(message_text):
                success = False
                
                # –ü–æ–ø—ã—Ç–∫–∞ 1: –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ë–û–¢–ê
                # (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)
                try:
                    result = await bot.forward_messages(
                        entity=YOUR_USER_ID,
                        messages=message.id,
                        from_peer=channel
                    )
                    
                    if result:
                        print(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ: {channel_username} / {message.id}")
                        forwarded += 1
                        success = True
                        await asyncio.sleep(1)
                    
                except Exception as e:
                    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –≥—Ä—É–ø–ø/–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                    pass
                
                # –ü–æ–ø—ã—Ç–∫–∞ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–º (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
                if not success:
                    try:
                        channel_name = channel_username.strip('@')
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        fallback_text = f"üì¢ **–ü–æ—Å—Ç –∏–∑ {channel_username}**\n\n"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ —ç—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª
                        if not channel_username.startswith('-'):
                            fallback_text += f"üîó https://t.me/{channel_name}/{message.id}\n\n"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                        if message_text:
                            fallback_text += f"{message_text[:3000]}"
                            if len(message_text) > 3000:
                                fallback_text += "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
                        else:
                            fallback_text += "(–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ - –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞)"
                        
                        await bot.send_message(YOUR_USER_ID, fallback_text)
                        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {channel_username} / {message.id}")
                        forwarded += 1
                        await asyncio.sleep(1)
                        
                    except Exception as bot_error:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {message.id}: {bot_error}")
                        # –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º forwarded
        
        return new_processed, forwarded, skipped_duplicates
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ {channel_username}: {e}")
        await bot.send_message(
            YOUR_USER_ID, 
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {channel_username}:\n{e}"
        )
        return 0, 0, 0


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–Ω–∞–ª–æ–≤
    if not CHANNELS:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!")
        print("–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é CHANNELS –≤ GitHub Variables")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    if not KEYWORDS and not PATTERNS:
        print("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã!")
        print("–ë—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π)")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å session string
    client = TelegramClient(
        StringSession(SESSION_STRING), 
        API_ID, 
        API_HASH
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –±–æ—Ç–∞
    bot = TelegramClient(
        StringSession(), 
        API_ID, 
        API_HASH
    )
    
    await client.connect()
    await bot.start(bot_token=BOT_TOKEN)
    
    if not await client.is_user_authorized():
        print("‚ùå Session string –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!")
        await bot.send_message(
            YOUR_USER_ID,
            "‚ùå Session string –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π."
        )
        return
    
    print(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {datetime.now()}")
    print(f"üì∫ –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(CHANNELS)}")
    print(f"üîë –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(KEYWORDS)}")
    print(f"üö´ –°–ª–æ–≤-–∏—Å–∫–ª—é—á–µ–Ω–∏–π: {len(EXCLUDE_KEYWORDS)}")
    print(f"üîç –†–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π: {len(PATTERNS)}")
    print(f"üìä –ì–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞: {SEARCH_DEPTH} —Å–æ–æ–±—â–µ–Ω–∏–π")
    print(f"‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {TIME_RANGE_HOURS} —á–∞—Å–æ–≤")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    processed_dict = load_processed_messages()
    initial_processed_count = len(processed_dict)
    print(f"üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {initial_processed_count}")
    
    total_new = 0
    total_forwarded = 0
    total_skipped = 0
    
    try:
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
        for channel in CHANNELS:
            new, forwarded, skipped = await monitor_channel(
                client, 
                bot, 
                channel, 
                processed_dict
            )
            total_new += new
            total_forwarded += forwarded
            total_skipped += skipped
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
            await asyncio.sleep(2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ ID –∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ
        removed_count = save_processed_messages(processed_dict)
        
        print(f"\n‚ú® –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤—ã—Ö: {total_new}")
        print(f"üì§ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ: {total_forwarded}")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–µ–π: {total_skipped}")
        print(f"üßπ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {removed_count}")
        
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏–∫–∞–∫–∏—Ö —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∞–º–∏ –ø–æ—Å—Ç—ã
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await bot.send_message(YOUR_USER_ID, f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n{e}")
    
    finally:
        await client.disconnect()
        await bot.disconnect()


if __name__ == '__main__':
    asyncio.run(main())
